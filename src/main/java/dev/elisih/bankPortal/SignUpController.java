package dev.elisih.bankPortal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
//import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class SignUpController {

    @Autowired
    private dev.elisih.bankPortal.AccountRepository accountRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
//    private PasswordEncoder passwordEncoder;

    @PostMapping("/signup")
    public ResponseEntity<?> registerUser(@RequestBody SignUpRequest signUpRequest) {
        // Check if the account exists and the PIN is correct
        Account account = accountRepository.findByAccountNumber(signUpRequest.getAccountNumber());
        if (account != null && account.getPin().equals(signUpRequest.getPin())) {
            // Check if username is already taken
            if (userRepository.existsByUsername(signUpRequest.getUsername())) {
                return ResponseEntity
                        .badRequest()
                        .body("Error: Username is already taken!");
            }

            // Create new user's account
            User user = new User(
                    /* id */ null, // ID will be generated by the database
                    signUpRequest.getName(),
                    signUpRequest.getSurname(),
                    signUpRequest.getPhoneNumber(),
                    signUpRequest.getAddress(),
                    signUpRequest.getEmail(),
                    signUpRequest.getDateOfBirth(),
                    /* accounts */ List.of(account), // Assuming the account is directly added
                    signUpRequest.getUsername(),
                    signUpRequest.getPassword()
//                    passwordEncoder.encode(signUpRequest.getPassword()) // Encode the password
            );

            userRepository.save(user);

            return ResponseEntity.ok("User registered successfully!");
        } else {
            return ResponseEntity
                    .badRequest()
                    .body("Error: Invalid account number or PIN!");
        }
    }

}

