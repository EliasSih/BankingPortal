package dev.elisih.bankPortal;
import dev.elisih.bankPortal.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @PostMapping("/signup")
    public void signUp(@RequestBody User user) {
        // Check if the account number is in the accounts collection and the pin matches the account
        Query accountQuery = new Query();
        accountQuery.addCriteria(Criteria.where("accountNumber").is(user.getAccountNumber()));
        Account account = mongoTemplate.findOne(accountQuery, Account.class);

        if (account == null || !account.getPin().equals(user.getPin())) {
            throw new IllegalArgumentException("Invalid account number or PIN");
        }

        // Hash the password before storing it
        user.setPassword(hashing.HashString(user.getPassword()));

        // Store the user's sign details in the users collection in the MongoDB database
        userRepository.save(user);
    }

    @GetMapping("/users")
    public List<User> getUsers() {
        return userRepository.findAll();
    }

    @GetMapping("/users/{id}")
    public User getUser(@PathVariable String id) {
        return userRepository.findById(id).orElseThrow(() -> new NotFoundException("User not found"));
    }

    @PutMapping("/users/{id}")
    public User updateUser(@PathVariable String id, @RequestBody User user) {
        User existingUser = userRepository.findById(id).orElseThrow(() -> new NotFoundException("User not found"));

        existingUser.setUsername(user.getUsername());
        existingUser.setPassword(hashing.HashString(user.getPassword())); // Hash password before updating
        existingUser.setName(user.getName());
        existingUser.setSurname(user.getSurname());
        existingUser.setPhoneNumber(user.getPhoneNumber());
        existingUser.setAddress(user.getAddress());
        existingUser.setEmail(user.getEmail());
        existingUser.setDateOfBirth(user.getDateOfBirth());

        return userRepository.save(existingUser);
    }

    @DeleteMapping("/users/{id}")
    public void deleteUser(@PathVariable String id) {
        userRepository.deleteById(id);
    }
}
